        </main>
        <!-- CONTENT CLOSED -->
      </div>
      <!-- MAIN CONTENT CLOSED -->
    </div>
    <!-- WRAPPER CLOSED -->
  </div>
  <!-- LAYOUT CLOSED -->

  <script type="module" src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"></script>
  <script nomodule src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"></script>
  <script src="assets/js/prism.js"></script>

  <script>
    // sidebar
    const mLeftSideBar = document.getElementById('m-left-sidebar');
    const mMainContent = document.getElementById('m-main-content');
    const mControlLeftSidebar = document.getElementById('m-control-left-sidebar');
    mControlLeftSidebar.addEventListener('change', e => {
      if (e.target.checked){
        mLeftSideBar.setAttribute('active', true);
        mMainContent.setAttribute('active', true);
      } else {
        mLeftSideBar.removeAttribute('active');
        mMainContent.removeAttribute('active');
      }
    });

    // highlight code
    const blocks = document.querySelectorAll('.codeblock');
    for (let block of blocks){
      let preview = document.createElement('div');
      preview.className = 'preview';
      preview.innerHTML = block.innerHTML;

      let code = document.createElement('pre');
      code.className = 'code myscroll';

      let raw = preview.innerHTML.replace(/^\s+$/gm, '').trim();
      let minTab = Math.min.apply(null, raw.split('\n').filter(i => i).slice(1).map(row => {
        let i = 0;
        while (i < row.length){
          if (row[i] === ' '){
            i++;
            continue;
          }

          break;
        }
        
        return i
      }));

      raw = raw.replace(new RegExp(`^\\s{${minTab}}`, 'gm'), '');

      let html = Prism.highlight(raw, Prism.languages.html, 'html');
      code.innerHTML = html;

      block.innerHTML = preview.outerHTML;
      block.appendChild(code);
    }

    // theme
    function toBoolean(v){
      if (typeof v === 'string')
        return v === 'true';

      return !!v;
    }

    function autoTheme(){
      if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
        themeSelector.checked = true;
      } else {
        document.documentElement.classList.remove('dark');
        themeSelector.checked = false;
      }
    }

    function toggleMode(mode){
      localStorage.theme = mode;

      autoTheme();
    }

    const themeSelector = document.getElementById('m-theme-selector');
    themeSelector.addEventListener('change', e => {
      toggleMode(e.target.checked ? 'dark' : 'light');
    });

    autoTheme();

    // loader
    window.addEventListener('load', () => {
      setTimeout(() => {
        document.getElementById('m-loader').classList.add('opacity-0');

        setTimeout(() => {
          document.getElementById('m-loader').classList.add('hidden');
        }, 500);
      }, 500);
    });
  </script>
</body>
</html>